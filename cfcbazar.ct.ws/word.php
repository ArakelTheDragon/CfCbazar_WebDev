<?php// guess.php ‚Äî Public Word Guessing Game with Simulated Cash, Visit Tracking, and SEOini_set('display_errors', 1);ini_set('display_startup_errors', 1);error_reporting(E_ALL);require 'config.php'; // defines $conn// Visit tracking$uri  = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);$path = ($uri === '/' ? '/index.php' : $uri);$upd = $conn->prepare("UPDATE pages SET visits = visits + 1, updated_at = NOW() WHERE path = ?");if ($upd) {  $upd->bind_param('s', $path);  $upd->execute();  if ($upd->affected_rows === 0) {    $slug  = ltrim($path, '/');    $slug  = $slug === '' ? 'index' : $slug;    $title = 'Guess the Word';    $ins = $conn->prepare("      INSERT INTO pages (title, slug, path, visits, created_at, updated_at)      VALUES (?, ?, ?, 1, NOW(), NOW())    ");    if ($ins) {      $ins->bind_param('sss', $title, $slug, $path);      $ins->execute();      $ins->close();    }  }  $upd->close();}// Load dictionary$json_path = __DIR__ . '/words_dictionary.json';if (!file_exists($json_path)) {  die("‚ùå words_dictionary.json not found.");}$raw_words = json_decode(file_get_contents($json_path), true);if (!is_array($raw_words)) {  die("‚ùå Invalid dictionary format.");}$words_data = array_change_key_case($raw_words, CASE_LOWER);// Simulated cashsession_start();if (!isset($_SESSION['cash'])) $_SESSION['cash'] = 1.000;// Start new gameif ($_SERVER['REQUEST_METHOD'] === 'GET' && !isset($_SESSION['word'])) {  if ($_SESSION['cash'] < 0.01) die("‚ùå Not enough cash to play!");  $_SESSION['cash'] -= 0.01;  $_SESSION['word'] = strtolower(array_rand($words_data));  $_SESSION['display'] = str_repeat("_", strlen($_SESSION['word']));  $_SESSION['guesses'] = 0;}// Handle guessif ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['guess'])) {  header('Content-Type: application/json');  if (!isset($_SESSION['word'], $_SESSION['display'], $_SESSION['guesses'])) {    echo json_encode(['error' => 'Game not initialized']);    exit;  }  $word = $_SESSION['word'];  $guess = strtolower(trim($_POST['guess']));  $display = $_SESSION['display'];  $hint = $words_data[$word] ?? "Guess the word!";  $correct = false;  $newDisplay = '';  for ($i = 0; $i < strlen($word); $i++) {    if ($word[$i] === $guess && $display[$i] === '_') {      $newDisplay .= $guess;      $correct = true;    } else {      $newDisplay .= $display[$i];    }  }  $_SESSION['display'] = $newDisplay;  $_SESSION['guesses']++;  if ($_SESSION['display'] === $word) {    $_SESSION['cash'] += 0.25;    $message = "‚úÖ You guessed it in {$_SESSION['guesses']} tries! +$0.25";    $finished = true;    unset($_SESSION['word'], $_SESSION['display'], $_SESSION['guesses']);  } else {    $message = $correct ? "‚úÖ Good guess!" : "‚ùå Wrong letter.";    $finished = false;  }  echo json_encode([    'display' => implode(' ', str_split($newDisplay)),    'message' => $message,    'hint' => $hint,    'finished' => $finished,    'cash' => $_SESSION['cash']  ]);  exit;}?><!DOCTYPE html><html lang="en"><head>  <meta charset="UTF-8" />  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>  <title>üî§ Guess the Word | CfCbazar</title>  <meta name="description" content="Play Guess the Word and earn simulated cash. A free word guessing game by CfCbazar ‚Äî no login required!" />  <meta name="keywords" content="word game, guess the word, CfCbazar, free game, arcade, simulated cash, no login" />  <meta name="author" content="CfCbazar" />  <meta name="robots" content="index, follow" />  <meta property="og:title" content="üî§ Guess the Word | CfCbazar" />  <meta property="og:description" content="Play CfCbazar's free word guessing game. Guess letters and earn simulated cash!" />  <meta property="og:type" content="website" />  <meta property="og:url" content="https://cfcbazar.ct.ws/guess.php" />  <meta property="og:image" content="https://cfcbazar.ct.ws/assets/guess-preview.png" />  <meta name="twitter:card" content="summary_large_image" />  <meta name="twitter:title" content="üî§ Guess the Word | CfCbazar" />  <meta name="twitter:description" content="Play CfCbazar's free word guessing game. Guess letters and earn simulated cash!" />  <meta name="twitter:image" content="https://cfcbazar.ct.ws/assets/guess-preview.png" />  <style>    body {      font-family: 'Segoe UI', sans-serif;      background: linear-gradient(135deg, #f8f9fa, #cce3f2);      display: flex; align-items: center; justify-content: center;      min-height: 100vh; margin: 0;    }    .card {      background: #fff; padding: 24px; border-radius: 12px;      box-shadow: 0 8px 20px rgba(0,0,0,0.1);      text-align: center; max-width: 360px; width: 100%;    }    #balance {      font-weight: bold; margin-bottom: 16px;    }    h1 {      margin: 0 0 12px; font-size: 1.6em; color: #333;    }    #word {      font-size: 2em; letter-spacing: 6px; margin: 16px 0;    }    #hint, #result {      margin: 12px 0; color: #444;    }    .keyboard {      display: flex; flex-wrap: wrap;      justify-content: center; margin-top: 12px;    }    .keyboard button {      width: 36px; height: 44px; margin: 4px;      font-size: 1em; border: 1px solid #aaa;      border-radius: 4px; background: #f0f0f0;      cursor: pointer;    }    .keyboard button:disabled {      background: #ccc; cursor: default;    }    #reset-game {      margin-top: 20px;      padding: 10px 20px; background: #007bff;      color: #fff; border: none; border-radius: 6px;      font-size: 1em; cursor: pointer;    }    #reset-game:hover {      background: #0056b3;    }  </style></head><body>  <div class="card">    <div id="balance">      Cash: $<span id="balance-value"><?= number_format($_SESSION['cash'], 3) ?></span>    </div>    <h1>üî§ Guess the Word</h1>    <div id="word"><?= implode(' ', str_split($_SESSION['display'] ?? '')) ?></div>    <div id="hint"><?= htmlspecialchars($words_data[$_SESSION['word']] ?? '') ?></div>    <p id="result">Start guessing!</p>    <div id="keyboard" class="keyboard"></div>    <button id="reset-game">Reset Game</button>  </div>  <script>    let gameOver = false;    const balanceEl = document.getElementById('balance-value');    const wordEl    = document.getElementById('word');    const hintEl    = document.getElementById('hint');    const resultEl  = document.getElementById('result');    const kb        = document.getElementById('keyboard');    const resetBtn  = document.getElementById('reset-game');    function buildKeyboard() {      gameOver = false;      kb.innerHTML = '';      'abcdefghijklmnopqrstuvwxyz'.split('').forEach(letter => {        const btn = document.createElement('button');        btn.textContent = letter.toUpperCase();        btn.dataset.letter = letter;        btn.addEventListener('click', () => onKey(letter, btn));        kb.appendChild(btn);      });    }    function onKey(letter, btn) {      if (gameOver) return;      btn.disabled = true;      sendGuess(letter);    }    function sendGuess(letter) {      fetch(window.location.pathname, {        method: 'POST',        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },        body: 'guess=' + encodeURIComponent(letter)      })      .then(res => res.json())      .then(data => {        if (data.error) {          resultEl.textContent = data.error;          return;        }        wordEl.textContent   = data.display;        resultEl.textContent = data.message;        hintEl.textContent   = data.hint;        balanceEl.textContent = parseFloat(data.cash).toFixed(3);        if (data.finished) {          gameOver = true;          kb.querySelectorAll('button').forEach(b => b.disabled = true);        }      })      .catch(() => {        resultEl.textContent = "Error communicating with server.";      });    }    resetBtn.addEventListener('click', () => {      window.location.href = window.location.pathname;    });    buildKeyboard();  </script></body></html>